{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { DisqusShortname, DOMAIN } from \"../config\";\nconst SHORTNAME = DisqusShortname;\nconst WEBSITE_URL = DOMAIN;\n\nfunction renderDisqus() {\n  if (window.DISQUS === undefined) {\n    var script = document.createElement('script');\n    script.async = true;\n    script.src = 'https://' + SHORTNAME + '.disqus.com/embed.js';\n    document.getElementsByTagName('head')[0].appendChild(script);\n  } else {\n    window.DISQUS.reset({\n      reload: true\n    });\n  }\n}\n\nclass DisqusThread extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    return this.props.id !== nextProps.id || this.props.title !== nextProps.title || this.props.path !== nextProps.path;\n  }\n\n  componentDidMount() {\n    renderDisqus();\n  }\n\n  componentDidUpdate() {\n    renderDisqus();\n  }\n\n  render() {\n    let _this$props = this.props,\n        {\n      id,\n      title,\n      path\n    } = _this$props,\n        other = _objectWithoutProperties(_this$props, [\"id\", \"title\", \"path\"]);\n\n    if (process.env.BROWSER) {\n      window.disqus_shortname = SHORTNAME;\n      window.disqus_identifier = id;\n      window.disqus_title = title;\n      window.disqus_url = WEBSITE_URL + path;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", _objectSpread(_objectSpread({}, other), {}, {\n      id: \"disqus_thread\"\n    }));\n  }\n\n}\n\nexport default DisqusThread;","map":null,"metadata":{},"sourceType":"module"}