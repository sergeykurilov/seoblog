{"ast":null,"code":"import { API } from \"../config\";\nimport fetch from \"isomorphic-fetch\";\nimport cookie from \"js-cookie\";\nimport queryString from \"querystring\";\nimport { handleResponse, isAuth } from \"./auth\";\nexport var createBlog = function createBlog(blog, token) {\n  var url;\n\n  if (isAuth() && isAuth().role === 1) {\n    url = \"\".concat(API, \"/blog\");\n  } else {\n    url = \"\".concat(API, \"/user/blog\");\n  }\n\n  return fetch(\"\".concat(url), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listBlogsWithCategoriesAndTags = function listBlogsWithCategoriesAndTags(skip, limit) {\n  var data = {\n    limit: limit,\n    skip: skip\n  };\n  return fetch(\"\".concat(API, \"/blogs-categories-tags\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var singleBlog = function singleBlog(slug) {\n  return fetch(\"\".concat(API, \"/blog/\").concat(slug), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listRelated = function listRelated(blog) {\n  return fetch(\"\".concat(API, \"/blogs/related\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(blog)\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var list = function list(username) {\n  var listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = \"\".concat(API, \"/\").concat(username, \"/blogs\");\n  } else {\n    listBlogsEndpoint = \"\".concat(API, \"/blogs\");\n  }\n\n  return fetch(\"\".concat(listBlogsEndpoint), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listSearch = function listSearch(params) {\n  console.log('search params', params);\n  var query = queryString.stringify(params);\n  console.log('query params', query);\n  return fetch(\"\".concat(API, \"/blogs/search?\").concat(query), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var removeBlog = function removeBlog(slug, token) {\n  var url;\n\n  if (isAuth() && isAuth().role === 1) {\n    url = \"\".concat(API, \"/blog/\").concat(slug);\n  } else {\n    url = \"\".concat(API, \"/user/blog/\").concat(slug);\n  }\n\n  return fetch(\"\".concat(url), {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    }\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var updateBlog = function updateBlog(blog, token, slug) {\n  var updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = \"\".concat(API, \"/blog/\").concat(slug);\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = \"\".concat(API, \"/user/blog/\").concat(slug);\n  }\n\n  return fetch(\"\".concat(updateBlogEndpoint), {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};","map":{"version":3,"sources":["E:/seoblog/frontend/actions/blog.js"],"names":["API","fetch","cookie","queryString","handleResponse","isAuth","createBlog","blog","token","url","role","method","headers","Accept","Authorization","body","then","response","json","err","console","log","listBlogsWithCategoriesAndTags","skip","limit","data","JSON","stringify","singleBlog","slug","listRelated","list","username","listBlogsEndpoint","listSearch","params","query","removeBlog","updateBlog","updateBlogEndpoint"],"mappings":"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","sourcesContent":["import {API} from \"../config\";\r\nimport fetch from \"isomorphic-fetch\"\r\nimport cookie from \"js-cookie\"\r\nimport queryString from \"querystring\";\r\nimport {handleResponse, isAuth} from \"./auth\";\r\n\r\n\r\nexport const createBlog = (blog, token) => {\r\n    let url;\r\n    if (isAuth() && isAuth().role === 1) {\r\n        url = `${API}/blog`\r\n    } else {\r\n        url = `${API}/user/blog`\r\n    }\r\n\r\n    return fetch(`${url}`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: blog\r\n    })\r\n        .then(response => {\r\n            handleResponse(response)\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\r\n    const data = {\r\n        limit,\r\n        skip\r\n    };\r\n    return fetch(`${API}/blogs-categories-tags`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\n\r\nexport const singleBlog = slug => {\r\n    return fetch(`${API}/blog/${slug}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const listRelated = blog => {\r\n    return fetch(`${API}/blogs/related`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(blog)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const list = (username) => {\r\n    let listBlogsEndpoint;\r\n\r\n    if (username) {\r\n        listBlogsEndpoint = `${API}/${username}/blogs`;\r\n    } else {\r\n        listBlogsEndpoint = `${API}/blogs`;\r\n    }\r\n\r\n    return fetch(`${listBlogsEndpoint}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const listSearch = params => {\r\n    console.log('search params', params);\r\n    let query = queryString.stringify(params);\r\n    console.log('query params', query);\r\n    return fetch(`${API}/blogs/search?${query}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const removeBlog = (slug, token) => {\r\n    let url;\r\n    if (isAuth() && isAuth().role === 1) {\r\n        url = `${API}/blog/${slug}`\r\n    } else {\r\n        url = `${API}/user/blog/${slug}`\r\n    }\r\n\r\n \r\n    return fetch(`${url}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n        .then(response => {\r\n            handleResponse(response)\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const updateBlog = (blog, token, slug) => {\r\n    let updateBlogEndpoint;\r\n\r\n    if (isAuth() && isAuth().role === 1) {\r\n        updateBlogEndpoint = `${API}/blog/${slug}`;\r\n    } else if (isAuth() && isAuth().role === 0) {\r\n        updateBlogEndpoint = `${API}/user/blog/${slug}`;\r\n    }\r\n\r\n    return fetch(`${updateBlogEndpoint}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: blog\r\n    })\r\n        .then(response => {\r\n            handleResponse(response)\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}