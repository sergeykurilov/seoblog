{"ast":null,"code":"import { API } from \"../config\";\nimport fetch from \"isomorphic-fetch\";\nimport cookie from \"js-cookie\";\nimport queryString from \"querystring\";\nimport { isAuth } from \"./auth\";\nexport const createBlog = (blog, token) => {\n  let url;\n\n  if (isAuth() && isAuth().role === 1) {\n    url = `${API}/blog`;\n  } else {\n    url = `${API}/user/blog`;\n  }\n\n  return fetch(`${url}`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const singleBlog = slug => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n  return fetch(`${API}/blogs/related`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(blog)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const list = username => {\n  let listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = `${API}/${username}/blogs`;\n  } else {\n    listBlogsEndpoint = `${API}/blogs`;\n  }\n\n  return fetch(`${listBlogsEndpoint}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listSearch = params => {\n  console.log('search params', params);\n  let query = queryString.stringify(params);\n  console.log('query params', query);\n  return fetch(`${API}/blogs/search?${query}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n  let url;\n\n  if (isAuth() && isAuth().role === 1) {\n    url = `${API}/blog/${slug}`;\n  } else {\n    url = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${url}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${updateBlogEndpoint}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["E:/seoblog/frontend/actions/blog.js"],"names":["API","fetch","cookie","queryString","isAuth","createBlog","blog","token","url","role","method","headers","Accept","Authorization","body","then","response","json","catch","err","console","log","listBlogsWithCategoriesAndTags","skip","limit","data","JSON","stringify","singleBlog","slug","listRelated","list","username","listBlogsEndpoint","listSearch","params","query","removeBlog","updateBlog","updateBlogEndpoint"],"mappings":"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","sourcesContent":["import {API} from \"../config\";\r\nimport fetch from \"isomorphic-fetch\"\r\nimport cookie from \"js-cookie\"\r\nimport queryString from \"querystring\";\r\nimport {isAuth} from \"./auth\";\r\n\r\n\r\nexport const createBlog = (blog, token) => {\r\n    let url;\r\n    if (isAuth() && isAuth().role === 1) {\r\n        url = `${API}/blog`\r\n    } else {\r\n        url = `${API}/user/blog`\r\n    }\r\n\r\n    return fetch(`${url}`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: blog\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\r\n    const data = {\r\n        limit,\r\n        skip\r\n    };\r\n    return fetch(`${API}/blogs-categories-tags`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\n\r\nexport const singleBlog = slug => {\r\n    return fetch(`${API}/blog/${slug}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const listRelated = blog => {\r\n    return fetch(`${API}/blogs/related`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(blog)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const list = (username) => {\r\n    let listBlogsEndpoint;\r\n\r\n    if (username) {\r\n        listBlogsEndpoint = `${API}/${username}/blogs`;\r\n    } else {\r\n        listBlogsEndpoint = `${API}/blogs`;\r\n    }\r\n\r\n    return fetch(`${listBlogsEndpoint}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const listSearch = params => {\r\n    console.log('search params', params);\r\n    let query = queryString.stringify(params);\r\n    console.log('query params', query);\r\n    return fetch(`${API}/blogs/search?${query}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const removeBlog = (slug, token) => {\r\n    let url;\r\n    if (isAuth() && isAuth().role === 1) {\r\n        url = `${API}/blog/${slug}`\r\n    } else {\r\n        url = `${API}/user/blog/${slug}`\r\n    }\r\n\r\n\r\n    return fetch(`${url}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const updateBlog = (blog, token, slug) => {\r\n    let updateBlogEndpoint;\r\n\r\n    if (isAuth() && isAuth().role === 1) {\r\n        updateBlogEndpoint = `${API}/blog/${slug}`;\r\n    } else if (isAuth() && isAuth().role === 0) {\r\n        updateBlogEndpoint = `${API}/user/blog/${slug}`;\r\n    }\r\n\r\n    return fetch(`${updateBlogEndpoint}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: blog\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}